import os
import sys
from scripts.parser import fluid_parser
from scripts.core.version import Version
from scripts.core.language import Language, Translate
from scripts import fluid_infobox

header = f"""
{{{{Header|Project Zomboid|Fluids}}}}
{{{{Page version|{Version.get()}}}}}
{{{{Autogenerated|fluids|source=https://github.com/Vaileasys/pz-wiki_parser}}}}
"""

# Check if a name is or contains a proper noun for capitalisation
def check_name(fluid_id, name, method):
    PROPER_NOUN_FILTER = {
        'SecretFlavoring': {
            'lower': 'substance RTMS-M1A1',
            'capitalize': 'Substance RTMS-M1A1'
        },
        'SpiffoJuice': {
            'lower': "Spiffo's juice",
            'capitalize': "Spiffo's juice"
        },
        'Test': {
            'lower': "FLUID_TEST",
            'capitalize': "FLUID_TEST"
        },
        'FilterTestA': {
            'lower': "Fluid_Filter_A",
            'capitalize': "Fluid_Filter_A"
        },
        'FilterTestB': {
            'lower': "Fluid_Filter_B",
            'capitalize': "Fluid_Filter_B"
        },
        'FilterTestC': {
            'lower': "Fluid_Filter_C",
            'capitalize': "Fluid_Filter_C"
        }
    }
        
    try:
        if fluid_id in PROPER_NOUN_FILTER:
            return PROPER_NOUN_FILTER[fluid_id][method]
        elif method == 'lower':
            return name.lower()
        elif method == 'capitalize':
            return name.capitalize()
    except Exception:
        print(f"Error: '{method}' is an unknown method")
        return name


# Gets similar fluids based on a calculated score
def calculate_similar_fluids(fluid_id, fluid_data):
    # General comparison weights
    weights = {
        "categories": 3,
        "poison": 3,
        "fatigueChange": 1,
        "hungerChange": 1,
        "stressChange": 1,
        "thirstChange": 1,
        "unhappyChange": 1,
        "calories": 0.5,
        "carbohydrates": 0.5,
        "lipids": 0.5,
        "proteins": 0.5,
        "alcohol": 3,
        "fluReduction": 2,
        "painReduction": 2,
        "enduranceChange": 1,
        "foodSicknessReduction": 2
    }

    # Poison weights
    poison_effect = {
        'None': 0,
        'Mild': 1,
        'Medium': 2,
        'Severe': 3,
        'Extreme': 4,
        'Deadly': 5
    }

    compared_fluids = fluid_parser.get_fluid_data()
    target_fluid = process_fluid_data(fluid_id, fluid_data)
    similar_fluids = []

    # Get values and scores for all other fluids
    for other_id, other_data in compared_fluids.items():
        if other_id == fluid_id:
            continue

        compared_fluid = process_fluid_data(other_id, other_data)
        score = 0

        # Compare categories
        shared_categories = set(target_fluid['categories']) & set(compared_fluid['categories'])
        score += len(shared_categories) * weights['categories']

        # Compare poison
        target_poison = poison_effect.get(target_fluid['poison'], 0)
        other_poison = poison_effect.get(compared_fluid['poison'], 0)
        score += weights['poison'] * min(target_poison, other_poison)

        # Compare properties
        for prop, weight in weights.items():
            if prop in target_fluid['properties'] and prop in compared_fluid['properties']:
                target_value = target_fluid['properties'][prop]
                compared_value = compared_fluid['properties'][prop]
                if target_value == compared_value:
                    score += weight

        similar_fluids.append({'id': other_id, 'name': other_data.get('DisplayName', 'Fluid'), 'score': score})

    # Sort and return the top 3 names
    similar_fluids.sort(key=lambda x: x['score'], reverse=True)
    processed_links = []
    for fluid in similar_fluids[:3]:
        display_name = fluid['name']
        display_name_prefix = "Fluid_Name_"
        if display_name.startswith(display_name_prefix):
            display_name = display_name[len(display_name_prefix):]
        name_en = Translate.get(display_name, 'FluidID', 'en')
        # Special case for TaintedWater
        if fluid['id'] == "TaintedWater":
            # Get translation for tainted water string
            tainted_water = Translate.get("ItemNameTaintedWater", 'IGUI')
            name_translated = tainted_water.replace("%1", name_en)
        else:
            name_translated = name_en
        page_name = f"{name_translated} (fluid)"

        language_code = Language.get()
        if language_code != 'en':
            name_translated = Translate.get(display_name, 'FluidID')
            page_name = f"{page_name}/{language_code}"
        wiki_link = f"[[{page_name}|{name_translated}]]"
        processed_links.append(wiki_link)

    return processed_links


# Does some processing of fluid data
def process_fluid_data(fluid_id, fluid_data):
    # Process name
    display_name = fluid_data.get('DisplayName', 'Fluid')
    display_name_prefix = "Fluid_Name_"
    if display_name.startswith(display_name_prefix):
        display_name = display_name[len(display_name_prefix):]
    name = Translate.get(display_name, 'FluidID')

    categories = fluid_data.get('Categories', [])
    blend_whitelist = fluid_data.get('BlendWhiteList', {})
    whitelist = blend_whitelist.get('whitelist', False)
    whitelist_categories = blend_whitelist.get('categories', [])

    properties_data = {}
    if 'Properties' in fluid_data:
        properties_data = fluid_data['Properties']

    poison_data = {}
    if 'Poison' in fluid_data:
        poison_data = fluid_data['Poison']
    poison_max_effect = poison_data.get('maxEffect', 'None')

    processed_fluid_data = {
        'name': name,
        'whitelist': whitelist,
        'whitelist_categories': whitelist_categories,
        'properties': properties_data,
        'poison': poison_max_effect,
        'categories': categories
    }

    return processed_fluid_data


def generate_article(infobox_dir, output_dir):
    fluid_parser.get_fluid_data()
    for fluid_id, fluid_data in fluid_parser.get_fluid_data().items():
        alcoholic = False # contains alcohol
        beverage = False
        poison = False
        debug_fluid = False

        output_file_path = os.path.join(output_dir, f"{fluid_id}.txt")
        infobox_file_path = os.path.join(infobox_dir, f"{fluid_id}.txt")

        # Read infobox data
        try:
            if os.path.exists(infobox_file_path):
                with open(infobox_file_path, 'r', encoding='utf-8') as file:
                    infobox_content = file.read()
            else:
                print(f"File not found for '{fluid_id}'. Try generating infoboxes again.")
                infobox_content = f"{{{{Infobox fluid\n|name=\n|categories=\n|fluid_color=0, 0, 0\n|fluid_id=Base.{fluid_id}\n|infobox_version={Version.get()}\n}}}}"
        except Exception as e:
            print(f"Error reading infobox file '{infobox_file_path}': {e}")

        # Process fluid data
        try:
            processed_fluid_data = process_fluid_data(fluid_id, fluid_data)
            name = processed_fluid_data['name']

            if "Beverage" in processed_fluid_data.get('categories', []):
                beverage = True
            if processed_fluid_data.get('poison', 'none').lower() != "none":
                poison = True
            if "alcohol" in processed_fluid_data.get('properties', {}):
                if float(processed_fluid_data['properties']['alcohol']) > 0:
                    alcoholic = True
            if "test" in fluid_id.lower() or "debug" in fluid_id.lower() or "test" in name.lower() or "debug" in name.lower():
                debug_fluid = True

        except Exception as e:
            print(f"Error processing fluid data for '{fluid_id}': {e}")

        # Write txt article file
        try:
            with open(output_file_path, 'w', encoding='utf-8') as file:
                # Header
                file.write(header)

                # Infobox
                file.write(infobox_content)

                # Intro
                intro_dict = {
                    'default': f"\n'''{check_name(fluid_id, name, 'capitalize')}''' is a type of [[fluid]].",
                    'alcohol': f"\n'''{check_name(fluid_id, name, 'capitalize')}''' is a type of [[fluid]] containing alcohol.",
                    'alcohol_beverage': f"\n'''{check_name(fluid_id, name, 'capitalize')}''' is a type of [[fluid]] containing alcohol, that can also be used in beverages.",
                    'poison': f"\n'''{check_name(fluid_id, name, 'capitalize')}''' is a type of [[fluid]] that acts as a {processed_fluid_data['poison'].lower()} poison.",
                    'poison_alcohol': f"\n'''{check_name(fluid_id, name, 'capitalize')}''' is a type of [[fluid]] containing alcohol and acts as a {processed_fluid_data['poison'].lower()} poison.",
                    'beverage': f"\n'''{check_name(fluid_id, name, 'capitalize')}''' is a type of [[fluid]] that can be used in beverages.",
                    'debug': f"\n'''{check_name(fluid_id, name, 'capitalize')}''' is a type of [[fluid]] used in debugging."
                }

                intro = intro_dict['default']
                if debug_fluid:
                    intro = intro = intro_dict['debug']
                elif alcoholic and beverage:
                    intro = intro_dict['alcohol_beverage']
                elif alcoholic and poison:
                    intro = intro_dict['poison_alcohol']
                elif alcoholic:
                    intro = intro_dict['alcohol']
                elif poison:
                    intro = intro_dict['poison']
                elif beverage:
                    intro = intro = intro_dict['beverage']
                file.write(intro)

                # Usage
                file.write(f"\n\n==Usage==")
                file.write(f"\nLike other [[fluid]]s, {check_name(fluid_id, name, 'lower')} can be stored in a [[fluid container]], which may be an [[item]] or [[tile|entity]].")
                # Add mixing info if it has a whitelist
                if processed_fluid_data['whitelist']:
                    file.write(f"\n===Mixing===")
                    if not processed_fluid_data['whitelist_categories']:
                        file.write(f"\n{check_name(fluid_id, name, 'capitalize')} cannot be mixed with other fluids.")
                    elif len(processed_fluid_data['whitelist_categories']) == 1:
                        file.write(f"\n{check_name(fluid_id, name, 'capitalize')} can be mixed with other fluids that have the '{processed_fluid_data['whitelist_categories'][0]}' category.")
                    else:
                        file.write(f"\n{check_name(fluid_id, name, 'capitalize')} can be mixed with other fluids that have the following categories:")
                        file.write("\n*" + "\n*".join(processed_fluid_data['whitelist_categories']))

                # History
                file.write(f"\n\n==History==")
                file.write("\n{{HistoryTable|")
                file.write(f'\n{{{{HistoryLine|Build {Version.get().split(".")[0]}|Build {Version.get()}|Released on this version.}}}}')
                file.write(f"\n|fluid_id=Base.{fluid_id}")
                file.write("\n}}")

                # See also
                file.write(f"\n\n==See also==")
                file.write("\n*" + "\n*".join(calculate_similar_fluids(fluid_id, fluid_data)))

        except Exception as e:
            print(f"Error writing article file '{output_file_path}': {e}")        


def main():
    language_code = Language.get()
    # Check if fluid infoboxes have been generated
    infobox_dir = f"output/{language_code}/fluid_infoboxes/"
    output_dir = f"output/{language_code}/fluid_articles"
    if not os.path.exists(infobox_dir):
        while True:
            print(f"The infobox '{infobox_dir}' does not exist.")
            user_input = input("Want to generate fluid infoboxes? (Y/N)\n> ").strip().lower()

            if user_input == "y":
                print("Running 'fluid_infobox.py'...")
                fluid_infobox.main()
                break
            elif user_input == "n":
                print("Exiting script...")
                sys.exit(1)
            else:
                print("Invalid input.")
                continue
    
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    print("Generating articles...")

    generate_article(infobox_dir, output_dir)

    print(f"Fluid articles generated and saved to '{output_dir}'")

if __name__ == "__main__":
    main()