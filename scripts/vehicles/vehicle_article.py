import os
from scripts.core.language import Language
from scripts.objects.vehicle import Vehicle
from scripts.vehicles import vehicle_infobox, vehicle_parts, vehicle_list2
from scripts.core.file_loading import read_file, write_file
from scripts.core.constants import VEHICLE_DIR
from scripts.core.version import Version
from scripts.utils.util import format_link

VEH_DIR = VEHICLE_DIR.format(language_code=Language.get())

VEHICLE_BLACKLIST = ["Base.SportsCar_ez", "Base.ModernCar_Martin"]

def generate_header(vehicle: Vehicle):
    header = "{{{{Header|Project Zomboid|Vehicles|{category}}}}}"
    page_version = f"{{{{Page version|{Version.get()}}}}}"

    if vehicle.is_trailer:
        category = "Trailers"
    else:
        vehicle_type = vehicle.get_vehicle_type().capitalize()
        category = vehicle_type + " vehicles"
    header = header.format(category=category)

    return [header, page_version]

def generate_intro(vehicle: Vehicle):
    name = vehicle.get_name()
    parent = vehicle.get_parent()
    parent_link = "[[trailer]]" if vehicle.is_trailer else format_link(parent.get_name(), parent.get_page())

    return [f"A {name} is a [[vehicle]] in [[Project Zomboid]]. It is a [[#Variants|variant]] of {parent_link}."]

def generate_see_also():
    return ["*{{ll|Car Key}}", "*{{ll|Mechanic}}", "*{{ll|Mechanics}}", "*{{ll|Vehicle Knowledge}}"]

def load_file(rel_path):
    path = os.path.join(VEH_DIR, rel_path)
    file_str = read_file(path)
    return file_str.splitlines()

def load_modules():
    vehicle_infobox.main(pre_choice="1")
    vehicle_parts.main()
    vehicle_list2.main()

def process_vehicle(vehicle_id):
    if vehicle_id in VEHICLE_BLACKLIST:
        return
    
    vehicle = Vehicle(vehicle_id)
    parent_id = vehicle.get_parent().vehicle_id
    if vehicle.is_trailer:
        parent_id = "Base.Trailer"

    header_content = generate_header(vehicle)
    infobox_content = load_file(rel_path=os.path.join("infoboxes", vehicle_id + ".txt"))
    intro_content = generate_intro(vehicle)
    maintence_content = load_file(rel_path=os.path.join("maintenance", vehicle_id + ".txt"))
    variants_content = load_file(rel_path=os.path.join("lists", "vehicles_by_model", parent_id + ".txt"))
    see_also_content = generate_see_also()

    content = []

    content.extend(header_content)
    content.append("{{Autogenerated|B42}}")
    content.extend(infobox_content)
    content.extend(intro_content)

    content.append("\n==Maintenance==")
    content.extend(maintence_content)

    content.append("\n==Variants==")
    content.extend(variants_content)

    content.append("\n==See also==")
    content.extend(see_also_content)

    content.append("\n{{Navbox vehicles}}")

    rel_path = vehicle_id + ".txt"
    output_dir = os.path.join(VEH_DIR, "articles")
    write_file(content, rel_path=rel_path, root_path=output_dir)


def main():
    load_modules()
    for vehicle_id in Vehicle.all():
        process_vehicle(vehicle_id)

if __name__ == "__main__":
    main()